package cudnn

/* Generated by gencudnn. DO NOT EDIT */

// #include <cudnn_v7.h>
import "C"
import "runtime"

// Dropout is a representation of cudnnDropoutDescriptor_t.
type Dropout struct {
	internal C.cudnnDropoutDescriptor_t

	handle           *Context
	dropout          float32
	states           Memory
	stateSizeInBytes uintptr
	seed             uint64
}

// NewDropout creates a new Dropout.
func NewDropout(handle *Context, dropout float32, states Memory, stateSizeInBytes uintptr, seed uint64) (retVal *Dropout, err error) {
	var internal C.cudnnDropoutDescriptor_t
	if err := result(C.cudnnCreateDropoutDescriptor(&internal)); err != nil {
		return nil, err
	}

	if err := result(C.cudnnSetDropoutDescriptor(internal, handle.internal, C.float(dropout), states.Pointer(), C.size_t(stateSizeInBytes), C.ulonglong(seed))); err != nil {
		return nil, err
	}

	retVal = &Dropout{
		internal:         internal,
		handle:           handle,
		dropout:          dropout,
		states:           states,
		stateSizeInBytes: stateSizeInBytes,
		seed:             seed,
	}
	runtime.SetFinalizer(retVal, destroyDropout)
	return retVal, nil
}

// Handle returns the internal handle.
func (d *Dropout) Handle() *Context { return d.handle }

// Dropout returns the internal dropout.
func (d *Dropout) Dropout() float32 { return d.dropout }

// StateSizeInBytes returns the internal stateSizeInBytes.
func (d *Dropout) StateSizeInBytes() uintptr { return d.stateSizeInBytes }

// Seed returns the internal seed.
func (d *Dropout) Seed() uint64 { return d.seed }

func destroyDropout(obj *Dropout) { C.cudnnDestroyDropoutDescriptor(obj.internal) }
